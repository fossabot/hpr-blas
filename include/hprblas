// HPRBLAS standard header
//
// Copyright (C) 2017-2020 Stillwater Supercomputing, Inc.
//
// This file is part of the HPR-BLAS project, which is released under an MIT Open Source license.
#ifndef _HPRBLAS_STANDARD_HEADER_
#define _HPRBLAS_STANDARD_HEADER_

////////////////////////////////////////////////////////////////////////////////////////
///  BEHAVIORAL COMPILATION SWITCHES for posit library configuration

////////////////////////////////////////////////////////////////////////////////////////
// enable/disable special posit format I/O
#if !defined(POSIT_ROUNDING_ERROR_FREE_IO_FORMAT)
// default is to print (long double) values
#define POSIT_ROUNDING_ERROR_FREE_IO_FORMAT 0
#endif

////////////////////////////////////////////////////////////////////////////////////////
// enable/disable the ability to use literals in binary logic and arithmetic operators
#if !defined(POSIT_ENABLE_LITERALS)
// default is to enable them
#define POSIT_ENABLE_LITERALS 1
#endif

////////////////////////////////////////////////////////////////////////////////////////
// enable throwing specific exceptions for posit arithmetic errors
// left to application to enable
#if !defined(POSIT_THROW_ARITHMETIC_EXCEPTION)
// default is to use NaR as a signalling error
#define POSIT_THROW_ARITHMETIC_EXCEPTION 0
#endif

////////////////////////////////////////////////////////////////////////////////////////
/// INCLUDE FILES that make up the library
#include "universal/posit/posit.hpp"
#include "universal/posit/numeric_limits.hpp"

// fast specializations for special posit configurations
// enable fast implementations of the standard posits
// POSIT_FAST_SPECIALIZATION when set will turn on all fast implementations
// Each implementation defines a macros POSIT_FAST_POSIT_`nbits`_`es,
// and includes the fast implementation if set to 1.
// For example, POSIT_FAST_POSIT_8_0, when set to 1, will enable the fast implementation of posit<8,0>.
// The individual POSIT_FAST_### macros enable fine grain control over which configurations
// use fast code.
#include "universal/posit/specializations.hpp"

#include "universal/posit/posit_manipulators.hpp"
#include "universal/posit/posit_functions.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// the quire that enables user-controlled rounding
#include "universal/posit/quire.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// the posit exact dot product
#include "universal/posit/fdp.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// the posit elementary math functions
#include "universal/posit/math_functions.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// useful mathematical property functions
#include "universal/functions/functions.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// the underlying matrix/vector machinery
#ifndef MTL_WITH_INITLIST
#define MTL_WITH_INITLIST
#endif
#include <boost/numeric/mtl/mtl.hpp>

///////////////////////////////////////////////////////////////////////////////////////
/// the High-Performance Reproducible Basic Linear Algebra Subroutines
/// L1, L2, and L3 matrix/vector operations
#include "hprblas.hpp"
/// norms (l1, l2, linf, Frobenius) using HPR methods
#include "norms.hpp"

///////////////////////////////////////////////////////////////////////////////////////
/// linear system solvers
#include "solvers/lu_decomposition.hpp"
#include "solvers/cholesky.hpp"
#include "solvers/ldlt.hpp"
#include "solvers/gauss_jordan.hpp"


#endif
